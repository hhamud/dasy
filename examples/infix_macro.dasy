;; Infix Notation Macro Demo
;;
;; This file demonstrates how to use macros to create infix notation

;; This is a simple function that adds two numbers.  It is written in
;; prefix notation, which is the default in lisp.

(defn prefix_add [:uint256 x y] :uint256 [:external :pure]
  (+ x y))

;; in lisp, we can use macros to create new syntax.  Here we define a
;; macro called infix.  The macro takes an expression as an argument,
;; and returns a new expression.  The new expression swaps the first
;; two arguments of the original expression.

(defmacro infix [expr]
  "Swap the first two arguments of an expression"
  (let [[arg1 op arg2] expr] ;; destructure the expression
    `(~op ~arg1 ~arg2)))


;; Now we can write infix_add, which is more readable than
;; prefix_add to some people. The compiler will expand infix_add to
;; prefix_add, so the two functions are equivalent.
(defn infix_add [:uint256 x y] :uint256 [:external :pure]
  (infix
   (x + y)))
